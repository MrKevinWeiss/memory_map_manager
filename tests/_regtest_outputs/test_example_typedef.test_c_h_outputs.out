/**
 *****************************************************************************"
 * @addtogroup example_MMM
 * @{
 * @file      example_typedef.h
 * @author    Kevin Weiss
 * @version   0.00.00
 * @details   Generated from the memory map manager version 1.0.0
 *****************************************************************************"
 */
#ifndef EXAMPLE_TYPEDEF_H
#define EXAMPLE_TYPEDEF_H


#include <stdint.h>

#pragma pack(1)
/** @brief   */
typedef struct {
	uint8_t basic_enable_reg : 1; /**<  */
	uint8_t example_prescale_reg : 5; /**<  */
	uint8_t res : 2; /**< Reserved bits */
} example_bitfield_t;

/** @brief   */
typedef struct {
	uint16_t basic_enable_reg : 6; /**<  */
	uint16_t example_prescale_reg : 7; /**<  */
	uint16_t same_offset_over_8_bit_offset : 1; /**<  */
	uint16_t res : 2; /**< Reserved bits */
} longer_bitfield_t;

/** @brief   */
typedef union {
	struct {
		uint8_t basic_element; /**<  */
		uint32_t access_3_element; /**<  */
		uint32_t access_0_element; /**<  */
		uint32_t specified_element; /**<  */
		int32_t array_element[9]; /**<  */
		uint16_t other_element; /**<  */
		example_bitfield_t using_bitfield_type_element; /**<  */
	};
	uint8_t data8[52];/**< array for padding */
} the_example_typedef_t;

/** @brief   */
typedef union {
	struct {
		uint8_t element_a; /**<  */
		uint32_t element_b_with_access_3; /**<  */
		uint8_t res[11]; /**< Reserved bytes */
	};
	uint8_t data8[16];/**< array for padding */
} simple_t;

/** @brief   */
typedef union {
	struct {
		the_example_typedef_t an_element; /**<  */
		simple_t array_of_special_type[3]; /**<  */
		longer_bitfield_t longer_bitfield; /**<  */
		uint16_t other_element; /**<  */
	};
	uint8_t data8[104];/**< array for padding */
} mem_map_example_t;

/** @brief   */
typedef union {
	struct {
		uint8_t foo; /**<  */
		uint8_t bar; /**<  */
	};
	uint8_t data8[2];/**< array for padding */
} simple_mem_map_t;

/** @brief   */
typedef union {
	struct {
		uint8_t foobar; /**< foobar description */
	};
	uint8_t data8[1];/**< array for padding */
} non_generated_mm_t;

#pragma pack()
#endif /* EXAMPLE_TYPEDEF_H */
/** @} */
/**
 *****************************************************************************"
 * @addtogroup example_MMM
 * @{
 * @file      example_access.c
 * @author    Kevin Weiss
 * @version   0.00.00
 * @}
 * @details   Generated from the memory map manager version 1.0.0
 *****************************************************************************"
 */
/* Includes -----------------------------------------------------------------*/
#include <stdio.h>

/* Global variables ---------------------------------------------------------*/
const uint8_t MEM_MAP_EXAMPLE_T_ACCESS[] = { 
0x01, /* an_element_basic_element */
0x03, 0x?????????, 0x?????????, 0x?????????, /* an_element_access_3_element */
0x00, 0x?????????, 0x?????????, 0x?????????, /* an_element_access_0_element */
0x01, 0x?????????, 0x?????????, 0x?????????, /* an_element_specified_element */
0x01, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, /* an_element_array_element */
0x01, 0x?????????, /* an_element_other_element */
0x01, /* an_element_using_bitfield_type_element */
0x01, /* array_of_special_type_0_element_a */
0x03, 0x?????????, 0x?????????, 0x?????????, /* array_of_special_type_0_element_b_with_access_3 */
0x00, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, /* array_of_special_type_0_res */
0x01, /* array_of_special_type_1_element_a */
0x03, 0x?????????, 0x?????????, 0x?????????, /* array_of_special_type_1_element_b_with_access_3 */
0x00, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, /* array_of_special_type_1_res */
0x01, /* array_of_special_type_2_element_a */
0x03, 0x?????????, 0x?????????, 0x?????????, /* array_of_special_type_2_element_b_with_access_3 */
0x00, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, 0x?????????, /* array_of_special_type_2_res */
0x01, 0x?????????, /* longer_bitfield */
0x01, 0x????????? /* other_element */
};/**< access array total size 104 */
const uint8_t SIMPLE_MEM_MAP_T_ACCESS[] = { 
0x01, /* foo */
0x01 /* bar */
};/**< access array total size 2 */
/**
 *****************************************************************************"
 * @addtogroup example_MMM
 * @{
 * @file      example_map.c
 * @author    Kevin Weiss
 * @version   0.00.00
 * @}
 * @details   Generated from the memory map manager version 1.0.0
 *****************************************************************************"
 */
/* Includes ----------------------------------------------------------------*/
#include <stdint.h>

#include "example_map.h"

/* Global variables --------------------------------------------------------*/
const char* const EXAMPLE_TYPE_NAME[] = {"uint8_t",
"int8_t",
"uint16_t",
"int16_t",
"uint32_t",
"int32_t",
"uint64_t",
"int64_t",
"char",
"float",
"double"}; /** < type_name enum */

const uint8_t  EXAMPLE_TYPE_SIZE[] = {1,
1,
2,
2,
4,
4,
8,
8,
1,
4,
8}; /** <  type_size const array */

const char* const MEM_MAP_EXAMPLE_T_NAME[] = {"an_element.basic_element",
"an_element.access_3_element",
"an_element.access_0_element",
"an_element.specified_element",
"an_element.array_element",
"an_element.other_element",
"an_element.using_bitfield_type_element",
"an_element.using_bitfield_type_element.basic_enable_reg",
"an_element.using_bitfield_type_element.example_prescale_reg",
"an_element.using_bitfield_type_element.res",
"array_of_special_type[0].element_a",
"array_of_special_type[0].element_b_with_access_3",
"array_of_special_type[0].res",
"array_of_special_type[1].element_a",
"array_of_special_type[1].element_b_with_access_3",
"array_of_special_type[1].res",
"array_of_special_type[2].element_a",
"array_of_special_type[2].element_b_with_access_3",
"array_of_special_type[2].res",
"longer_bitfield",
"longer_bitfield.basic_enable_reg",
"longer_bitfield.example_prescale_reg",
"longer_bitfield.same_offset_over_8_bit_offset",
"longer_bitfield.res",
"other_element"}; /** < name const array */

const uint8_t MEM_MAP_EXAMPLE_T_OFFSET[] = {0,
1,
5,
9,
13,
49,
51,
51,
51,
51,
52,
53,
57,
68,
69,
73,
84,
85,
89,
100,
100,
100,
100,
100,
102}; /** < offset const array */

const uint8_t MEM_MAP_EXAMPLE_T_TYPE[] = {0,
4,
4,
4,
5,
2,
0,
0,
0,
0,
0,
4,
0,
0,
4,
0,
0,
4,
0,
2,
2,
2,
2,
2,
2}; /** < type_name const array */

const uint8_t MEM_MAP_EXAMPLE_T_ARRAY_SIZE[] = {0,
0,
0,
0,
9,
0,
0,
0,
0,
0,
0,
0,
11,
0,
0,
11,
0,
0,
11,
0,
0,
0,
0,
0,
0}; /** < array_size const array */

const uint8_t MEM_MAP_EXAMPLE_T_BIT_OFFSET[] = {0,
0,
0,
0,
0,
0,
0,
0,
1,
6,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
6,
13,
14,
0}; /** < bit_offset const array */

const uint8_t MEM_MAP_EXAMPLE_T_BITS[] = {0,
0,
0,
0,
0,
0,
0,
1,
5,
2,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
6,
7,
1,
2,
0}; /** < bits const array */

const char* const SIMPLE_MEM_MAP_T_NAME[] = {"foo",
"bar"}; /** < name const array */

const uint8_t SIMPLE_MEM_MAP_T_OFFSET[] = {0,
1}; /** < offset const array */

const uint8_t SIMPLE_MEM_MAP_T_TYPE[] = {0,
0}; /** < type_name const array */

const uint8_t SIMPLE_MEM_MAP_T_ARRAY_SIZE[] = {0,
0}; /** < array_size const array */

const uint8_t SIMPLE_MEM_MAP_T_BIT_OFFSET[] = {0,
0}; /** < bit_offset const array */

const uint8_t SIMPLE_MEM_MAP_T_BITS[] = {0,
0}; /** < bits const array */

/**
 *****************************************************************************"
 * @addtogroup example_MMM
 * @{
 * @file      example_map.h
 * @author    Kevin Weiss
 * @version   0.00.00
 * @details   Generated from the memory map manager version 1.0.0
 *****************************************************************************"
 */
#ifndef EXAMPLE_MAP_H
#define EXAMPLE_MAP_H

/* Defines ----------------------------------------------------------------- */
#define IF_VERSION_MAJOR 0 /**< Major version of interface */
#define IF_VERSION_MINOR 0 /**< Minor version of interface */
#define IF_VERSION_PATCH 0 /**< Patch version of interface */

/* Global variables -------------------------------------------------------- */
extern const char* const EXAMPLE_TYPE_NAME[]; /** < type_name enum */
extern const uint8_t  EXAMPLE_TYPE_SIZE[]; /** <  type_size const array */

#define MEM_MAP_EXAMPLE_T_NUM_OF_RECORDS 25 /**< Number of records in the map */

extern const char* const MEM_MAP_EXAMPLE_T_NAME[]; /** < name const array */
extern const uint8_t MEM_MAP_EXAMPLE_T_OFFSET[]; /** < offset const array */
extern const uint8_t MEM_MAP_EXAMPLE_T_TYPE[]; /** < type const array */
extern const uint8_t MEM_MAP_EXAMPLE_T_ARRAY_SIZE[]; /** < array_size const array */
extern const uint8_t MEM_MAP_EXAMPLE_T_BIT_OFFSET[]; /** < bit_offset const array */
extern const uint8_t MEM_MAP_EXAMPLE_T_BITS[]; /** < bits const array */
#define SIMPLE_MEM_MAP_T_NUM_OF_RECORDS 2 /**< Number of records in the map */

extern const char* const SIMPLE_MEM_MAP_T_NAME[]; /** < name const array */
extern const uint8_t SIMPLE_MEM_MAP_T_OFFSET[]; /** < offset const array */
extern const uint8_t SIMPLE_MEM_MAP_T_TYPE[]; /** < type const array */
extern const uint8_t SIMPLE_MEM_MAP_T_ARRAY_SIZE[]; /** < array_size const array */
extern const uint8_t SIMPLE_MEM_MAP_T_BIT_OFFSET[]; /** < bit_offset const array */
extern const uint8_t SIMPLE_MEM_MAP_T_BITS[]; /** < bits const array */
#endif /* EXAMPLE_MAP_H */
/** @} */
/**
 *****************************************************************************"
 * @addtogroup example_MMM
 * @{
 * @file      example_defaults.h
 * @author    Kevin Weiss
 * @version   0.00.00
 * @details   Generated from the memory map manager version 1.0.0
 *****************************************************************************"
 */
#ifndef EXAMPLE_DEFAULTS_H
#define EXAMPLE_DEFAULTS_H

/* Defines -------------------------------------------------------------------*/
/** @brief default for an_element.specified_element:  */
#define DEFAULT_AN_ELEMENT_SPECIFIED_ELEMENT 1

/** @brief Assign defaults for mem_map_example_t */
void init_defaults_mem_map_example_t(mem_map_example_t *init);

/** @brief Assign defaults for simple_mem_map_t */
void init_defaults_simple_mem_map_t(simple_mem_map_t *init);

#endif /* EXAMPLE_DEFAULTS_H */
/** @} */
/**
 *****************************************************************************"
 * @addtogroup example_MMM
 * @{
 * @file      example_defaults.c
 * @author    Kevin Weiss
 * @version   0.00.00
 * @}
 * @details   Generated from the memory map manager version 1.0.0
 *****************************************************************************"
 */
/* Includes ------------------------------------------------------------------*/
#include <stdint.h>

#include "example_typedef.h"
#include "example_defaults.h"

/* Functions -----------------------------------------------------------------*/
/** @brief Assign defaults for mem_map_example_t */
void init_defaults_mem_map_example_t(mem_map_example_t *init) {
	init->an_element.specified_element = DEFAULT_AN_ELEMENT_SPECIFIED_ELEMENT;
}

/** @brief Assign defaults for simple_mem_map_t */
void init_defaults_simple_mem_map_t(simple_mem_map_t *init) {
}

